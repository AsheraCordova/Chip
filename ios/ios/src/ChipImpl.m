//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSChipPlugin\src\main\java\com\ashera\chip\ChipImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "Chip.h"
#include "ChipImpl.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CompoundButton.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FrameLayout.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "LinearLayoutImpl.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASChipImpl () {
 @public
  id uiView_;
  ADXChip *chip_;
  id<ASHasWidgets> parentLL_;
  id<ASIWidget> textWidget_;
  ADColorStateList *rippleColor_;
  int32_t rippleRadius_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setOnClickWithId:(id)objValue;

- (void)setOnCheckedWithId:(id)objValue;

- (void)nativePostCreate;

- (void)setRippleColorWithId:(id)value;

- (id)getRippleColor;

- (id)preSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                              withNSString:(NSString *)strValue
                                    withId:(id)objValue
                 withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)addRippleEffect;

- (void)rippleWithViewWithId:(id)uiview
                   withFloat:(float)radius
                      withId:(id)colorTo;

@end

J2OBJC_FIELD_SETTER(ASChipImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASChipImpl, chip_, ADXChip *)
J2OBJC_FIELD_SETTER(ASChipImpl, parentLL_, id<ASHasWidgets>)
J2OBJC_FIELD_SETTER(ASChipImpl, textWidget_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASChipImpl, rippleColor_, ADColorStateList *)

inline NSString *ASChipImpl_get_WIDGET_TEXTVIEW(void);
static NSString *ASChipImpl_WIDGET_TEXTVIEW = @"TextView";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASChipImpl, WIDGET_TEXTVIEW, NSString *)

__attribute__((unused)) static void ASChipImpl_setWidgetOnNativeClass(ASChipImpl *self);

__attribute__((unused)) static void ASChipImpl_nativeRemoveViewWithASIWidget_(ASChipImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASChipImpl_createLayoutParamsWithADView_(ASChipImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASChipImpl_getLayoutParamsWithADView_(ASChipImpl *self, ADView *view);

__attribute__((unused)) static void ASChipImpl_setOnClickWithId_(ASChipImpl *self, id objValue);

__attribute__((unused)) static void ASChipImpl_setOnCheckedWithId_(ASChipImpl *self, id objValue);

__attribute__((unused)) static void ASChipImpl_nativePostCreate(ASChipImpl *self);

__attribute__((unused)) static void ASChipImpl_setRippleColorWithId_(ASChipImpl *self, id value);

__attribute__((unused)) static id ASChipImpl_getRippleColor(ASChipImpl *self);

__attribute__((unused)) static id ASChipImpl_preSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASChipImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASChipImpl_addRippleEffect(ASChipImpl *self);

__attribute__((unused)) static void ASChipImpl_rippleWithViewWithId_withFloat_withId_(ASChipImpl *self, id uiview, float radius, id colorTo);

@interface ASChipImpl_Ellipsize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASChipImpl_Ellipsize, mapping_, id<JavaUtilMap>)

@interface ASChipImpl_ChipExt () {
 @public
  WEAK_ ASChipImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASChipImpl_ChipExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASChipImpl_ChipExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASChipImpl_ChipExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASChipImpl_ChipExt, templates_, id<JavaUtilMap>)

@interface ASChipImpl_OnCheckedChangeListener : NSObject < ADCompoundButton_OnCheckedChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onCheckedChangedWithADCompoundButton:(ADCompoundButton *)buttonView
                                 withBoolean:(bool)isChecked;

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADCompoundButton:(ADCompoundButton *)buttonView
                                                      withBoolean:(bool)isChecked;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChipImpl_OnCheckedChangeListener)

J2OBJC_FIELD_SETTER(ASChipImpl_OnCheckedChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASChipImpl_OnCheckedChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASChipImpl_OnCheckedChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASChipImpl_OnCheckedChangeListener, action_, NSString *)

__attribute__((unused)) static void ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASChipImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASChipImpl_OnCheckedChangeListener *new_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipImpl_OnCheckedChangeListener *create_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASChipImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASChipImpl_OnCheckedChangeListener *new_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipImpl_OnCheckedChangeListener *create_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASChipImpl_OnCheckedChangeListener)


@interface ASChipImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChipImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASChipImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASChipImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASChipImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASChipImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(ASChipImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASChipImpl_OnClickListener *new_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipImpl_OnClickListener *create_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASChipImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASChipImpl_OnClickListener *new_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipImpl_OnClickListener *create_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASChipImpl_OnClickListener)


@interface ASChipImpl_RippleTouchListener : NSObject < ADView_OnClickListener > {
 @public
  WEAK_ ASChipImpl *this$0_;
}

- (instancetype)initWithASChipImpl:(ASChipImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChipImpl_RippleTouchListener)

__attribute__((unused)) static void ASChipImpl_RippleTouchListener_initWithASChipImpl_(ASChipImpl_RippleTouchListener *self, ASChipImpl *outer$);

__attribute__((unused)) static ASChipImpl_RippleTouchListener *new_ASChipImpl_RippleTouchListener_initWithASChipImpl_(ASChipImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipImpl_RippleTouchListener *create_ASChipImpl_RippleTouchListener_initWithASChipImpl_(ASChipImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASChipImpl_RippleTouchListener)


@interface ASChipImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChipImpl_$Lambda$1)

__attribute__((unused)) static void ASChipImpl_$Lambda$1_initWithASIWidget_(ASChipImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASChipImpl_$Lambda$1 *new_ASChipImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipImpl_$Lambda$1 *create_ASChipImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


NSString *ASChipImpl_LOCAL_NAME = @"com.google.android.material.chip.Chip";
NSString *ASChipImpl_GROUP_NAME = @"com.google.android.material.chip.Chip";

@implementation ASChipImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkable"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkedIcon"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkedIconTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkedIconVisible"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipBackgroundColor"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipCornerRadius"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipEndPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipIcon"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipIconSize"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipIconTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipIconVisible"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipMinHeight"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipStartPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipStrokeColor"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipStrokeWidth"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeIcon"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeIconEndPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeIconSize"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeIconStartPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeIconTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeIconVisible"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ensureMinTouchTargetSize"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iconEndPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iconStartPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textEndPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStartPadding"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checked"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onCheckedChange"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onCloseIconClick"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.chip.Chip.ellipsize", new_ASChipImpl_Ellipsize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ellipsize"])) withTypeWithNSString:@"com.google.android.material.chip.Chip.ellipsize"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAppearance"])) withTypeWithNSString:@"string"])) withStylePriorityWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(1)]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rippleColor"])) withTypeWithNSString:@"colorstate"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASChipImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASChipImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASChipImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASChipImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  chip_ = new_ASChipImpl_ChipExt_initWithASChipImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASChipImpl_setWidgetOnNativeClass(self);
  ASChipImpl_nativePostCreate(self);
}

- (void)setWidgetOnNativeClass {
  ASChipImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return chip_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADXChip *) nil_chk(chip_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASChipImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  bool remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXChip *) nil_chk(chip_)) getChildCount]) {
    [((ADXChip *) nil_chk(chip_)) removeViewAtWithInt:index];
    ASChipImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASChipImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASChipImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXChip *) nil_chk(chip_)) addViewWithADView:view];
    }
    else {
      [((ADXChip *) nil_chk(chip_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASChipImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASChipImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASChipImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASChipImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASChipImpl_ChipExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  objValue = ASChipImpl_preSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"checkable", @"checkedIcon", @"checkedIconTint", @"checkedIconVisible", @"chipBackgroundColor", @"chipCornerRadius", @"chipEndPadding", @"chipIcon", @"chipIconSize", @"chipIconTint", @"chipIconVisible", @"chipMinHeight", @"chipStartPadding", @"chipStrokeColor", @"chipStrokeWidth", @"closeIcon", @"closeIconEndPadding", @"closeIconSize", @"closeIconStartPadding", @"closeIconTint", @"closeIconVisible", @"ensureMinTouchTargetSize", @"iconEndPadding", @"iconStartPadding", @"textEndPadding", @"textStartPadding", @"maxWidth", @"checked", @"text", @"onCheckedChange", @"onCloseIconClick", @"ellipsize", @"textAppearance", @"rippleColor" }, 34)) {
    case 0:
    {
      [((ADXChip *) nil_chk(chip_)) setCheckableWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 1:
    {
      [((ADXChip *) nil_chk(chip_)) setCheckedIconWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    }
    break;
    case 2:
    {
      [((ADXChip *) nil_chk(chip_)) setCheckedIconTintWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 3:
    {
      [((ADXChip *) nil_chk(chip_)) setCheckedIconVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 4:
    {
      [((ADXChip *) nil_chk(chip_)) setChipBackgroundColorWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 5:
    {
      [((ADXChip *) nil_chk(chip_)) setChipCornerRadiusWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 6:
    {
      [((ADXChip *) nil_chk(chip_)) setChipEndPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 7:
    {
      [((ADXChip *) nil_chk(chip_)) setChipIconWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    }
    break;
    case 8:
    {
      [((ADXChip *) nil_chk(chip_)) setChipIconSizeWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 9:
    {
      [((ADXChip *) nil_chk(chip_)) setChipIconTintWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 10:
    {
      [((ADXChip *) nil_chk(chip_)) setChipIconVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 11:
    {
      [((ADXChip *) nil_chk(chip_)) setChipMinHeightWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 12:
    {
      [((ADXChip *) nil_chk(chip_)) setChipStartPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 13:
    {
      [((ADXChip *) nil_chk(chip_)) setChipStrokeColorWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 14:
    {
      [((ADXChip *) nil_chk(chip_)) setChipStrokeWidthWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 15:
    {
      [((ADXChip *) nil_chk(chip_)) setCloseIconWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    }
    break;
    case 16:
    {
      [((ADXChip *) nil_chk(chip_)) setCloseIconEndPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 17:
    {
      [((ADXChip *) nil_chk(chip_)) setCloseIconSizeWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 18:
    {
      [((ADXChip *) nil_chk(chip_)) setCloseIconStartPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 19:
    {
      [((ADXChip *) nil_chk(chip_)) setCloseIconTintWithADColorStateList:(ADColorStateList *) cast_chk(objValue, [ADColorStateList class])];
    }
    break;
    case 20:
    {
      [((ADXChip *) nil_chk(chip_)) setCloseIconVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 21:
    {
      [((ADXChip *) nil_chk(chip_)) setEnsureMinTouchTargetSizeWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 22:
    {
      [((ADXChip *) nil_chk(chip_)) setIconEndPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 23:
    {
      [((ADXChip *) nil_chk(chip_)) setIconStartPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 24:
    {
      [((ADXChip *) nil_chk(chip_)) setTextEndPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 25:
    {
      [((ADXChip *) nil_chk(chip_)) setTextStartPaddingWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 26:
    {
      [((ADXChip *) nil_chk(chip_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 27:
    {
      [((ADXChip *) nil_chk(chip_)) setCheckedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 28:
    {
      [((ADXChip *) nil_chk(chip_)) setTextWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
    }
    break;
    case 29:
    {
      ASChipImpl_setOnCheckedWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASChipImpl_setOnClickWithId_(self, objValue);
    }
    break;
    case 31:
    {
      [((ADXChip *) nil_chk(chip_)) setEllipsizeWithNSString:strValue];
    }
    break;
    case 32:
    {
      [((ADXChip *) nil_chk(chip_)) setTextAppearanceWithNSString:strValue];
    }
    break;
    case 33:
    {
      ASChipImpl_setRippleColorWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"checkedIcon", @"checkedIconTint", @"chipBackgroundColor", @"chipCornerRadius", @"chipEndPadding", @"chipIcon", @"chipIconTint", @"chipMinHeight", @"chipStartPadding", @"chipStrokeColor", @"chipStrokeWidth", @"closeIcon", @"closeIconEndPadding", @"closeIconSize", @"closeIconStartPadding", @"closeIconTint", @"ensureMinTouchTargetSize", @"iconEndPadding", @"iconStartPadding", @"textEndPadding", @"textStartPadding", @"rippleColor" }, 22)) {
    case 0:
    {
      return [((ADXChip *) nil_chk(chip_)) getCheckedIcon];
    }
    case 1:
    {
      return [((ADXChip *) nil_chk(chip_)) getCheckedIconTint];
    }
    case 2:
    {
      return [((ADXChip *) nil_chk(chip_)) getChipBackgroundColor];
    }
    case 3:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getChipCornerRadius]);
    }
    case 4:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getChipEndPadding]);
    }
    case 5:
    {
      return [((ADXChip *) nil_chk(chip_)) getChipIcon];
    }
    case 6:
    {
      return [((ADXChip *) nil_chk(chip_)) getChipIconTint];
    }
    case 7:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getChipMinHeight]);
    }
    case 8:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getChipStartPadding]);
    }
    case 9:
    {
      return [((ADXChip *) nil_chk(chip_)) getChipStrokeColor];
    }
    case 10:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getChipStrokeWidth]);
    }
    case 11:
    {
      return [((ADXChip *) nil_chk(chip_)) getCloseIcon];
    }
    case 12:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getCloseIconEndPadding]);
    }
    case 13:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getCloseIconSize]);
    }
    case 14:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getCloseIconStartPadding]);
    }
    case 15:
    {
      return [((ADXChip *) nil_chk(chip_)) getCloseIconTint];
    }
    case 16:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADXChip *) nil_chk(chip_)) shouldEnsureMinTouchTargetSize]);
    }
    case 17:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getIconEndPadding]);
    }
    case 18:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getIconStartPadding]);
    }
    case 19:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getTextEndPadding]);
    }
    case 20:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXChip *) nil_chk(chip_)) getTextStartPadding]);
    }
    case 21:
    {
      return ASChipImpl_getRippleColor(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setOnClickWithId:(id)objValue {
  ASChipImpl_setOnClickWithId_(self, objValue);
}

- (void)setOnCheckedWithId:(id)objValue {
  ASChipImpl_setOnCheckedWithId_(self, objValue);
}

- (void)nativePostCreate {
  ASChipImpl_nativePostCreate(self);
}

- (void)setRippleColorWithId:(id)value {
  ASChipImpl_setRippleColorWithId_(self, value);
}

- (id)getRippleColor {
  return ASChipImpl_getRippleColor(self);
}

- (id)preSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                              withNSString:(NSString *)strValue
                                    withId:(id)objValue
                 withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASChipImpl_preSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXChip *) nil_chk(chip_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)addRippleEffect {
  ASChipImpl_addRippleEffect(self);
}

- (void)rippleWithViewWithId:(id)uiview
                   withFloat:(float)radius
                      withId:(id)colorTo {
  ASChipImpl_rippleWithViewWithId_withFloat_withId_(self, uiview, radius, colorTo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 31, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[22].selector = @selector(requestLayout);
  methods[23].selector = @selector(invalidate);
  methods[24].selector = @selector(setOnClickWithId:);
  methods[25].selector = @selector(setOnCheckedWithId:);
  methods[26].selector = @selector(nativePostCreate);
  methods[27].selector = @selector(setRippleColorWithId:);
  methods[28].selector = @selector(getRippleColor);
  methods[29].selector = @selector(preSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[30].selector = @selector(setIdWithNSString:);
  methods[31].selector = @selector(setVisibleWithBoolean:);
  methods[32].selector = @selector(addRippleEffect);
  methods[33].selector = @selector(rippleWithViewWithId:withFloat:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "chip_", "LADXChip;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parentLL_", "LASHasWidgets;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textWidget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rippleColor_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rippleRadius_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WIDGET_TEXTVIEW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setOnClick", "LNSObject;", "setOnChecked", "setRippleColor", "preSetAttribute", "setId", "setVisible", "Z", "rippleWithView", "LNSObject;FLNSObject;", &ASChipImpl_LOCAL_NAME, &ASChipImpl_GROUP_NAME, &ASChipImpl_WIDGET_TEXTVIEW, "LASChipImpl_Ellipsize;LASChipImpl_ChipExt;LASChipImpl_OnCheckedChangeListener;LASChipImpl_OnClickListener;LASChipImpl_RippleTouchListener;" };
  static const J2ObjcClassInfo _ASChipImpl = { "ChipImpl", "com.ashera.chip", ptrTable, methods, fields, 7, 0x1, 34, 9, -1, 40, -1, -1, -1 };
  return &_ASChipImpl;
}

@end

void ASChipImpl_init(ASChipImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASChipImpl_GROUP_NAME, ASChipImpl_LOCAL_NAME);
  self->rippleRadius_ = 0;
}

ASChipImpl *new_ASChipImpl_init() {
  J2OBJC_NEW_IMPL(ASChipImpl, init)
}

ASChipImpl *create_ASChipImpl_init() {
  J2OBJC_CREATE_IMPL(ASChipImpl, init)
}

void ASChipImpl_initWithNSString_(ASChipImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASChipImpl_GROUP_NAME, localname);
  self->rippleRadius_ = 0;
}

ASChipImpl *new_ASChipImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASChipImpl, initWithNSString_, localname)
}

ASChipImpl *create_ASChipImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASChipImpl, initWithNSString_, localname)
}

void ASChipImpl_initWithNSString_withNSString_(ASChipImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->rippleRadius_ = 0;
}

ASChipImpl *new_ASChipImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASChipImpl, initWithNSString_withNSString_, groupName, localname)
}

ASChipImpl *create_ASChipImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASChipImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASChipImpl_setWidgetOnNativeClass(ASChipImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASChipImpl_nativeRemoveViewWithASIWidget_(ASChipImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXChip *) nil_chk(self->chip_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASChipImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASChipImpl_createLayoutParamsWithADView_(ASChipImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASChipImpl_getLayoutParamsWithADView_(ASChipImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASChipImpl_setOnClickWithId_(ASChipImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    [((ADXChip *) nil_chk(self->chip_)) setOnCloseIconClickListenerWithADView_OnClickListener:new_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(self, (NSString *) objValue)];
  }
  else {
    [((ADXChip *) nil_chk(self->chip_)) setOnCloseIconClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>) cast_check(objValue, ADView_OnClickListener_class_())];
  }
}

void ASChipImpl_setOnCheckedWithId_(ASChipImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    [((ADXChip *) nil_chk(self->chip_)) setOnCheckedChangeListenerWithADCompoundButton_OnCheckedChangeListener:new_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue)];
  }
  else {
    [((ADXChip *) nil_chk(self->chip_)) setOnCheckedChangeListenerWithADCompoundButton_OnCheckedChangeListener:(id<ADCompoundButton_OnCheckedChangeListener>) cast_check(objValue, ADCompoundButton_OnCheckedChangeListener_class_())];
  }
}

void ASChipImpl_nativePostCreate(ASChipImpl *self) {
  self->parentLL_ = (id<ASHasWidgets>) cast_check(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASLinearLayoutImpl_LOCAL_NAME, ASLinearLayoutImpl_GROUP_NAME, self, false), ASHasWidgets_class_());
  [((id<ASHasWidgets>) nil_chk(self->parentLL_)) setAttributeWithNSString:@"layout_width" withId:@"match_parent" withBoolean:false];
  id<ASIWidget> iconWidget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"ImageView", self->parentLL_, false);
  [((id<ASIWidget>) nil_chk(iconWidget)) setAttributeWithNSString:@"layout_width" withId:@"24dp" withBoolean:false];
  [iconWidget setAttributeWithNSString:@"layout_height" withId:@"24dp" withBoolean:false];
  [iconWidget setVisibleWithBoolean:false];
  id<ASIWidget> checkboxWidget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"ImageView", self->parentLL_, false);
  [((id<ASIWidget>) nil_chk(checkboxWidget)) setAttributeWithNSString:@"src" withId:@"@drawable/chip_icon_checked" withBoolean:false];
  [checkboxWidget setVisibleWithBoolean:false];
  [checkboxWidget setAttributeWithNSString:@"layout_width" withId:@"24dp" withBoolean:false];
  [checkboxWidget setAttributeWithNSString:@"layout_height" withId:@"24dp" withBoolean:false];
  self->textWidget_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASChipImpl_WIDGET_TEXTVIEW, @"TextView", self->parentLL_, false);
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"layout_width" withId:@"wrap_content" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"layout_height" withId:@"32dp" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"singleLine" withId:@"true" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"layout_weight" withId:@"1" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"paddingHorizontal" withId:@"8dp" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"typeface" withId:@"sans" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"textSize" withId:@"14sp" withBoolean:false];
  [((id<ASIWidget>) nil_chk(self->textWidget_)) setAttributeWithNSString:@"gravity" withId:@"center_vertical" withBoolean:false];
  id<ASIWidget> closeIconWidget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"ImageView", self->parentLL_, false);
  [((id<ASIWidget>) nil_chk(closeIconWidget)) setAttributeWithNSString:@"src" withId:@"@drawable/chip_icon_close" withBoolean:false];
  [closeIconWidget setVisibleWithBoolean:false];
  [closeIconWidget setAttributeWithNSString:@"layout_width" withId:@"24dp" withBoolean:false];
  [closeIconWidget setAttributeWithNSString:@"layout_height" withId:@"24dp" withBoolean:false];
  [((id<ASHasWidgets>) nil_chk(self->parentLL_)) setAttributeWithNSString:@"background" withId:@"#fff" withBoolean:false];
  [((id<ASHasWidgets>) nil_chk(self->parentLL_)) setAttributeWithNSString:@"gravity" withId:@"center" withBoolean:false];
  [((id<ASHasWidgets>) nil_chk(self->parentLL_)) setAttributeWithNSString:@"layout_marginVertical" withId:@"16dp" withBoolean:false];
  [((ADXChip *) nil_chk(self->chip_)) initViewWithASHasWidgets:self->parentLL_ withASIWidget:self->textWidget_ withASIWidget:iconWidget withASIWidget:checkboxWidget withASIWidget:closeIconWidget];
  [((ADXChip *) nil_chk(self->chip_)) setChipCornerRadiusWithFloat:ASPluginInvoker_convertDpToPixelWithNSString_(@"16dp")];
}

void ASChipImpl_setRippleColorWithId_(ASChipImpl *self, id value) {
  bool addListener = self->rippleColor_ == nil;
  self->rippleColor_ = (ADColorStateList *) cast_chk(value, [ADColorStateList class]);
  if (addListener) {
    ASChipImpl_addRippleEffect(self);
  }
}

id ASChipImpl_getRippleColor(ASChipImpl *self) {
  return self->rippleColor_;
}

id ASChipImpl_preSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASChipImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"onClick" }, 1)) {
    case 0:
    {
      id<ADView_OnClickListener> onClickListener;
      if ([objValue isKindOfClass:[NSString class]]) {
        onClickListener = new_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
        [((ADXChip *) nil_chk(self->chip_)) setChipClickListenerWithADView_OnClickListener:onClickListener];
        return nil;
      }
    }
  }
  return objValue;
}

void ASChipImpl_addRippleEffect(ASChipImpl *self) {
  [((ADXChip *) nil_chk(self->chip_)) setRippleInternalClickListenerWithADView_OnClickListener:new_ASChipImpl_RippleTouchListener_initWithASChipImpl_(self)];
}

void ASChipImpl_rippleWithViewWithId_withFloat_withId_(ASChipImpl *self, id uiview, float radius, id colorTo) {
  UIView* view = (UIView*) uiview;
  if (!view) {
    return;
  }
  
  UIView *oldRipple = (UIView *)[view viewWithTag:10000];
  if (oldRipple) {
    [oldRipple.layer removeAllAnimations];
    [oldRipple removeFromSuperview];
  }
  
  UIView *ripple = [[UIView alloc] initWithFrame:CGRectMake(0.0f, 0.0f, radius, radius)];
  ripple.tag = 10000;
  ripple.layer.cornerRadius = radius * 0.5f;
  ripple.backgroundColor = [UIColor clearColor];
  ripple.alpha = 1.0f;
  [view insertSubview:ripple atIndex:0];
  ripple.center = CGPointMake(view.frame.size.width/2, view.frame.size.height/2);
  CGFloat scale = 8.0f;
  [UIView animateWithDuration:0.6f delay:0.0f options:UIViewAnimationOptionCurveEaseOut animations:^{
    ripple.transform = CGAffineTransformMakeScale(scale, scale);
    ripple.alpha = 0.0f;
    ripple.backgroundColor = (UIColor*) colorTo;
  } completion:^(BOOL finished) {
    [ripple removeFromSuperview];
  }];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipImpl)

J2OBJC_NAME_MAPPING(ASChipImpl, "com.ashera.chip", "AS")

@implementation ASChipImpl_Ellipsize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASChipImpl_Ellipsize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASChipImpl;" };
  static const J2ObjcClassInfo _ASChipImpl_Ellipsize = { "Ellipsize", "com.ashera.chip", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASChipImpl_Ellipsize;
}

@end

void ASChipImpl_Ellipsize_init(ASChipImpl_Ellipsize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASChipImpl_Ellipsize *new_ASChipImpl_Ellipsize_init() {
  J2OBJC_NEW_IMPL(ASChipImpl_Ellipsize, init)
}

ASChipImpl_Ellipsize *create_ASChipImpl_Ellipsize_init() {
  J2OBJC_CREATE_IMPL(ASChipImpl_Ellipsize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipImpl_Ellipsize)

@implementation ASChipImpl_ChipExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASChipImpl:(ASChipImpl *)outer$ {
  ASChipImpl_ChipExt_initWithASChipImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASChipImpl_ChipExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASChipImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASChipImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASChipImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASChipImpl_ChipExt = { "ChipExt", "com.ashera.chip", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASChipImpl_ChipExt;
}

@end

void ASChipImpl_ChipExt_initWithASChipImpl_(ASChipImpl_ChipExt *self, ASChipImpl *outer$) {
  self->this$0_ = outer$;
  ADXChip_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASChipImpl_ChipExt *new_ASChipImpl_ChipExt_initWithASChipImpl_(ASChipImpl *outer$) {
  J2OBJC_NEW_IMPL(ASChipImpl_ChipExt, initWithASChipImpl_, outer$)
}

ASChipImpl_ChipExt *create_ASChipImpl_ChipExt_initWithASChipImpl_(ASChipImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASChipImpl_ChipExt, initWithASChipImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipImpl_ChipExt)

@implementation ASChipImpl_OnCheckedChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onCheckedChangedWithADCompoundButton:(ADCompoundButton *)buttonView
                                 withBoolean:(bool)isChecked {
  if (action_ == nil || [action_ isEqual:@"onCheckedChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onCheckedChange"];
    id<JavaUtilMap> obj = [self getOnCheckedChangeEventObjWithADCompoundButton:buttonView withBoolean:isChecked];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ buttonView, JavaLangBoolean_valueOfWithBoolean_(isChecked) } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADCompoundButton:(ADCompoundButton *)buttonView
                                                      withBoolean:(bool)isChecked {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"checkedchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"isChecked", JavaLangBoolean_valueOfWithBoolean_(isChecked));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onCheckedChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onCheckedChangedWithADCompoundButton:withBoolean:);
  methods[4].selector = @selector(getOnCheckedChangeEventObjWithADCompoundButton:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onCheckedChanged", "LADCompoundButton;Z", "getOnCheckedChangeEventObj", "(Lr/android/widget/CompoundButton;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASChipImpl;" };
  static const J2ObjcClassInfo _ASChipImpl_OnCheckedChangeListener = { "OnCheckedChangeListener", "com.ashera.chip", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASChipImpl_OnCheckedChangeListener;
}

@end

void ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASChipImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASChipImpl_OnCheckedChangeListener *new_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASChipImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASChipImpl_OnCheckedChangeListener *create_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASChipImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASChipImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASChipImpl_OnCheckedChangeListener *new_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASChipImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASChipImpl_OnCheckedChangeListener *create_ASChipImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASChipImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipImpl_OnCheckedChangeListener)

@implementation ASChipImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASChipImpl;" };
  static const J2ObjcClassInfo _ASChipImpl_OnClickListener = { "OnClickListener", "com.ashera.chip", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASChipImpl_OnClickListener;
}

@end

void ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(ASChipImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASChipImpl_OnClickListener *new_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASChipImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASChipImpl_OnClickListener *create_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASChipImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASChipImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASChipImpl_OnClickListener *new_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASChipImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASChipImpl_OnClickListener *create_ASChipImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASChipImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipImpl_OnClickListener)

@implementation ASChipImpl_RippleTouchListener

- (instancetype)initWithASChipImpl:(ASChipImpl *)outer$ {
  ASChipImpl_RippleTouchListener_initWithASChipImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  ADView *view = (ADView *) cast_chk([((id<ASHasWidgets>) nil_chk(this$0_->parentLL_)) asWidget], [ADView class]);
  id color = this$0_->rippleColor_;
  if ([color isKindOfClass:[ADColorStateList class]]) {
    color = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(((ADColorStateList *) color))) getColorForStateWithIntArray:[((ADView *) nil_chk(view)) getDrawableState] withInt:ADColor_BLACK]);
  }
  ASChipImpl_rippleWithViewWithId_withFloat_withId_(this$0_, [((id<ASHasWidgets>) nil_chk(this$0_->parentLL_)) asNativeWidget], JavaLangMath_maxWithInt_withInt_([((ADView *) nil_chk(view)) getWidth], [view getHeight]), ASViewImpl_getColorWithId_(color));
}

- (void)__javaClone:(ASChipImpl_RippleTouchListener *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASChipImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASChipImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASChipImpl;", "onClick", "LADView;" };
  static const J2ObjcClassInfo _ASChipImpl_RippleTouchListener = { "RippleTouchListener", "com.ashera.chip", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASChipImpl_RippleTouchListener;
}

@end

void ASChipImpl_RippleTouchListener_initWithASChipImpl_(ASChipImpl_RippleTouchListener *self, ASChipImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASChipImpl_RippleTouchListener *new_ASChipImpl_RippleTouchListener_initWithASChipImpl_(ASChipImpl *outer$) {
  J2OBJC_NEW_IMPL(ASChipImpl_RippleTouchListener, initWithASChipImpl_, outer$)
}

ASChipImpl_RippleTouchListener *create_ASChipImpl_RippleTouchListener_initWithASChipImpl_(ASChipImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASChipImpl_RippleTouchListener, initWithASChipImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipImpl_RippleTouchListener)

@implementation ASChipImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASChipImpl_$Lambda$1_initWithASIWidget_(ASChipImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASChipImpl_$Lambda$1 *new_ASChipImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASChipImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASChipImpl_$Lambda$1 *create_ASChipImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASChipImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSChipPlugin\src\main\java\com\ashera\chip\ChipGroupImpl.java
//

#include "BaseHasWidgets.h"
#include "ChipGroup.h"
#include "ChipGroupImpl.h"
#include "ChipImpl.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "ModelExpressionParser.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASChipGroupImpl () {
 @public
  id uiView_;
  ADXChipGroup *chipGroup_;
  id<ADXChipGroup_OnCheckedStateChangeListener> onCheckedStateChangeListener_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXChipGroup_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setOnCheckedStateChangeWithId:(id)objValue;

- (void)checkMultipleWithId:(id)objValue;

- (void)clearCheck;

- (void)uncheckWithId:(id)objValue;

- (void)addChipWithId:(id)id_
               withId:(id)text
               withId:(id)chipParams;

- (void)removeChipWithId:(id)id_;

- (void)nativePostCreate;

@end

J2OBJC_FIELD_SETTER(ASChipGroupImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASChipGroupImpl, chipGroup_, ADXChipGroup *)
J2OBJC_FIELD_SETTER(ASChipGroupImpl, onCheckedStateChangeListener_, id<ADXChipGroup_OnCheckedStateChangeListener>)

__attribute__((unused)) static void ASChipGroupImpl_setWidgetOnNativeClass(ASChipGroupImpl *self);

__attribute__((unused)) static void ASChipGroupImpl_nativeRemoveViewWithASIWidget_(ASChipGroupImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASChipGroupImpl_createLayoutParamsWithADView_(ASChipGroupImpl *self, ADView *view);

__attribute__((unused)) static ADXChipGroup_LayoutParams *ASChipGroupImpl_getLayoutParamsWithADView_(ASChipGroupImpl *self, ADView *view);

__attribute__((unused)) static void ASChipGroupImpl_setOnCheckedStateChangeWithId_(ASChipGroupImpl *self, id objValue);

__attribute__((unused)) static void ASChipGroupImpl_checkMultipleWithId_(ASChipGroupImpl *self, id objValue);

__attribute__((unused)) static void ASChipGroupImpl_clearCheck(ASChipGroupImpl *self);

__attribute__((unused)) static void ASChipGroupImpl_uncheckWithId_(ASChipGroupImpl *self, id objValue);

__attribute__((unused)) static void ASChipGroupImpl_addChipWithId_withId_withId_(ASChipGroupImpl *self, id id_, id text, id chipParams);

__attribute__((unused)) static void ASChipGroupImpl_removeChipWithId_(ASChipGroupImpl *self, id id_);

__attribute__((unused)) static void ASChipGroupImpl_nativePostCreate(ASChipGroupImpl *self);

@interface ASChipGroupImpl_ChipGroupExt () {
 @public
  __unsafe_unretained ASChipGroupImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASChipGroupImpl_ChipGroupExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASChipGroupImpl_ChipGroupExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASChipGroupImpl_ChipGroupExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASChipGroupImpl_ChipGroupExt, templates_, id<JavaUtilMap>)

@interface ASChipGroupImpl_OnCheckedStateChangeListener : NSObject < ADXChipGroup_OnCheckedStateChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onCheckedChangedWithADXChipGroup:(ADXChipGroup *)group
                        withJavaUtilList:(id<JavaUtilList>)checkedIds;

- (id<JavaUtilMap>)getOnCheckedChangedEventObjWithADXChipGroup:(ADXChipGroup *)group
                                              withJavaUtilList:(id<JavaUtilList>)checkedIds;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChipGroupImpl_OnCheckedStateChangeListener)

J2OBJC_FIELD_SETTER(ASChipGroupImpl_OnCheckedStateChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASChipGroupImpl_OnCheckedStateChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASChipGroupImpl_OnCheckedStateChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASChipGroupImpl_OnCheckedStateChangeListener, action_, NSString *)

__attribute__((unused)) static void ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(ASChipGroupImpl_OnCheckedStateChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASChipGroupImpl_OnCheckedStateChangeListener *new_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipGroupImpl_OnCheckedStateChangeListener *create_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(ASChipGroupImpl_OnCheckedStateChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASChipGroupImpl_OnCheckedStateChangeListener *new_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipGroupImpl_OnCheckedStateChangeListener *create_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASChipGroupImpl_OnCheckedStateChangeListener)

@interface ASChipGroupImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChipGroupImpl_$Lambda$1)

__attribute__((unused)) static void ASChipGroupImpl_$Lambda$1_initWithASIWidget_(ASChipGroupImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASChipGroupImpl_$Lambda$1 *new_ASChipGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASChipGroupImpl_$Lambda$1 *create_ASChipGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

NSString *ASChipGroupImpl_LOCAL_NAME = @"com.google.android.material.chip.ChipGroup";
NSString *ASChipGroupImpl_GROUP_NAME = @"com.google.android.material.chip.ChipGroup";

@implementation ASChipGroupImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkedChip"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"uncheckedChip"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"clearCheck"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkMultiple"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"id"])) withArrayListToFinalTypeWithNSString:@"listtointarray"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectionRequired"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onCheckedStateChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipSpacing"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipSpacingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"chipSpacingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleSelection"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"addChip"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"removeChip"])) withTypeWithNSString:@"string"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASChipGroupImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASChipGroupImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASChipGroupImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASChipGroupImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  chipGroup_ = new_ASChipGroupImpl_ChipGroupExt_initWithASChipGroupImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASChipGroupImpl_setWidgetOnNativeClass(self);
  ASChipGroupImpl_nativePostCreate(self);
}

- (void)setWidgetOnNativeClass {
  ASChipGroupImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return chipGroup_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXChipGroup *) nil_chk(chipGroup_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASChipGroupImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXChipGroup *) nil_chk(chipGroup_)) getChildCount]) {
    [((ADXChipGroup *) nil_chk(chipGroup_)) removeViewAtWithInt:index];
    ASChipGroupImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASChipGroupImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASChipGroupImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXChipGroup *) nil_chk(chipGroup_)) addViewWithADView:view];
    }
    else {
      [((ADXChipGroup *) nil_chk(chipGroup_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASChipGroupImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXChipGroup_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASChipGroupImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXChipGroup_LayoutParams *layoutParams = ASChipGroupImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADXChipGroup_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXChipGroup_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXChipGroup_LayoutParams *layoutParams = ASChipGroupImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXChipGroup_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXChipGroup_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASChipGroupImpl_ChipGroupExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"checkedChip", @"uncheckedChip", @"clearCheck", @"checkMultiple", @"selectionRequired", @"onCheckedStateChange", @"chipSpacing", @"chipSpacingHorizontal", @"chipSpacingVertical", @"singleLine", @"singleSelection", @"addChip", @"removeChip" }, 13)) {
    case 0:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) checkWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      ASChipGroupImpl_uncheckWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASChipGroupImpl_clearCheck(self);
    }
    break;
    case 3:
    {
      ASChipGroupImpl_checkMultipleWithId_(self, objValue);
    }
    break;
    case 4:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) setSelectionRequiredWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 5:
    {
      ASChipGroupImpl_setOnCheckedStateChangeWithId_(self, objValue);
    }
    break;
    case 6:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) setChipSpacingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 7:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) setChipSpacingHorizontalWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 8:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) setChipSpacingVerticalWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 9:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) setSingleLineWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 10:
    {
      [((ADXChipGroup *) nil_chk(chipGroup_)) setSingleSelectionWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 11:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id chipId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"chipId"] withNSString:@"string"];
        id text = [self quickConvertWithId:[data getWithId:@"text"] withNSString:@"resourcestring"];
        id chipParams = [self quickConvertWithId:[data getWithId:@"chipParams"] withNSString:@"resourcestring"];
        ASChipGroupImpl_addChipWithId_withId_withId_(self, chipId, text, chipParams);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id chipId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"chipId"] withNSString:@"string"];
          id text = [self quickConvertWithId:[data getWithId:@"text"] withNSString:@"resourcestring"];
          id chipParams = [self quickConvertWithId:[data getWithId:@"chipParams"] withNSString:@"resourcestring"];
          ASChipGroupImpl_addChipWithId_withId_withId_(self, chipId, text, chipParams);
        }
      }
    }
    break;
    case 12:
    {
      ASChipGroupImpl_removeChipWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"checkedChip", @"checkMultiple" }, 2)) {
    case 0:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXChipGroup *) nil_chk(chipGroup_)) getCheckedChipId]);
    }
    case 1:
    {
      return [((ADXChipGroup *) nil_chk(chipGroup_)) getCheckedChipIds];
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setOnCheckedStateChangeWithId:(id)objValue {
  ASChipGroupImpl_setOnCheckedStateChangeWithId_(self, objValue);
}

- (void)checkMultipleWithId:(id)objValue {
  ASChipGroupImpl_checkMultipleWithId_(self, objValue);
}

- (void)clearCheck {
  ASChipGroupImpl_clearCheck(self);
}

- (void)uncheckWithId:(id)objValue {
  ASChipGroupImpl_uncheckWithId_(self, objValue);
}

- (void)addChipWithId:(id)id_
               withId:(id)text
               withId:(id)chipParams {
  ASChipGroupImpl_addChipWithId_withId_withId_(self, id_, text, chipParams);
}

- (void)removeChipWithId:(id)id_ {
  ASChipGroupImpl_removeChipWithId_(self, id_);
}

- (void)nativePostCreate {
  ASChipGroupImpl_nativePostCreate(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXChipGroup *) nil_chk(chipGroup_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXChipGroup_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[22].selector = @selector(requestLayout);
  methods[23].selector = @selector(invalidate);
  methods[24].selector = @selector(setOnCheckedStateChangeWithId:);
  methods[25].selector = @selector(checkMultipleWithId:);
  methods[26].selector = @selector(clearCheck);
  methods[27].selector = @selector(uncheckWithId:);
  methods[28].selector = @selector(addChipWithId:withId:withId:);
  methods[29].selector = @selector(removeChipWithId:);
  methods[30].selector = @selector(nativePostCreate);
  methods[31].selector = @selector(setIdWithNSString:);
  methods[32].selector = @selector(setVisibleWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "chipGroup_", "LADXChipGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onCheckedStateChangeListener_", "LADXChipGroup_OnCheckedStateChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setOnCheckedStateChange", "LNSObject;", "checkMultiple", "uncheck", "addChip", "LNSObject;LNSObject;LNSObject;", "removeChip", "setId", "setVisible", "Z", &ASChipGroupImpl_LOCAL_NAME, &ASChipGroupImpl_GROUP_NAME, "LASChipGroupImpl_ChipGroupExt;LASChipGroupImpl_OnCheckedStateChangeListener;" };
  static const J2ObjcClassInfo _ASChipGroupImpl = { "ChipGroupImpl", "com.ashera.chip", ptrTable, methods, fields, 7, 0x1, 33, 5, -1, 39, -1, -1, -1 };
  return &_ASChipGroupImpl;
}

@end

void ASChipGroupImpl_init(ASChipGroupImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASChipGroupImpl_GROUP_NAME, ASChipGroupImpl_LOCAL_NAME);
}

ASChipGroupImpl *new_ASChipGroupImpl_init() {
  J2OBJC_NEW_IMPL(ASChipGroupImpl, init)
}

ASChipGroupImpl *create_ASChipGroupImpl_init() {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl, init)
}

void ASChipGroupImpl_initWithNSString_(ASChipGroupImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASChipGroupImpl_GROUP_NAME, localname);
}

ASChipGroupImpl *new_ASChipGroupImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASChipGroupImpl, initWithNSString_, localname)
}

ASChipGroupImpl *create_ASChipGroupImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl, initWithNSString_, localname)
}

void ASChipGroupImpl_initWithNSString_withNSString_(ASChipGroupImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASChipGroupImpl *new_ASChipGroupImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASChipGroupImpl, initWithNSString_withNSString_, groupName, localname)
}

ASChipGroupImpl *create_ASChipGroupImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASChipGroupImpl_setWidgetOnNativeClass(ASChipGroupImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASChipGroupImpl_nativeRemoveViewWithASIWidget_(ASChipGroupImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXChipGroup *) nil_chk(self->chipGroup_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASChipGroupImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASChipGroupImpl_createLayoutParamsWithADView_(ASChipGroupImpl *self, ADView *view) {
  ADXChipGroup_LayoutParams *layoutParams = (ADXChipGroup_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXChipGroup_LayoutParams class]);
  layoutParams = (ADXChipGroup_LayoutParams *) cast_chk([view getLayoutParams], [ADXChipGroup_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXChipGroup_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXChipGroup_LayoutParams *ASChipGroupImpl_getLayoutParamsWithADView_(ASChipGroupImpl *self, ADView *view) {
  return (ADXChipGroup_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXChipGroup_LayoutParams class]);
}

void ASChipGroupImpl_setOnCheckedStateChangeWithId_(ASChipGroupImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onCheckedStateChangeListener_ = new_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:self->onCheckedStateChangeListener_];
  }
  else {
    self->onCheckedStateChangeListener_ = (id<ADXChipGroup_OnCheckedStateChangeListener>) cast_check(objValue, ADXChipGroup_OnCheckedStateChangeListener_class_());
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:self->onCheckedStateChangeListener_];
  }
}

void ASChipGroupImpl_checkMultipleWithId_(ASChipGroupImpl *self, id objValue) {
  if (self->onCheckedStateChangeListener_ != nil) {
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:nil];
  }
  IOSIntArray *ids = (IOSIntArray *) cast_chk(objValue, [IOSIntArray class]);
  {
    IOSIntArray *a__ = ids;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id id_ = JavaLangInteger_valueOfWithInt_(*b__++);
      [((ADXChipGroup *) nil_chk(self->chipGroup_)) checkWithInt:[(JavaLangInteger *) cast_chk(id_, [JavaLangInteger class]) intValue]];
    }
  }
  if (self->onCheckedStateChangeListener_ != nil) {
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:self->onCheckedStateChangeListener_];
    [((id<ADXChipGroup_OnCheckedStateChangeListener>) nil_chk(self->onCheckedStateChangeListener_)) onCheckedChangedWithADXChipGroup:self->chipGroup_ withJavaUtilList:[((ADXChipGroup *) nil_chk(self->chipGroup_)) getCheckedChipIds]];
  }
}

void ASChipGroupImpl_clearCheck(ASChipGroupImpl *self) {
  [((ADXChipGroup *) nil_chk(self->chipGroup_)) clearCheck];
}

void ASChipGroupImpl_uncheckWithId_(ASChipGroupImpl *self, id objValue) {
  if (self->onCheckedStateChangeListener_ != nil) {
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:nil];
  }
  id<JavaUtilList> checkedChipIds = new_JavaUtilArrayList_initWithJavaUtilCollection_([((ADXChipGroup *) nil_chk(self->chipGroup_)) getCheckedChipIds]);
  [checkedChipIds removeWithId:(JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])];
  [((ADXChipGroup *) nil_chk(self->chipGroup_)) clearCheck];
  for (id __strong id_ in checkedChipIds) {
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) checkWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(id_, [JavaLangInteger class]))) intValue]];
  }
  if (self->onCheckedStateChangeListener_ != nil) {
    [((ADXChipGroup *) nil_chk(self->chipGroup_)) setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:self->onCheckedStateChangeListener_];
    [((id<ADXChipGroup_OnCheckedStateChangeListener>) nil_chk(self->onCheckedStateChangeListener_)) onCheckedChangedWithADXChipGroup:self->chipGroup_ withJavaUtilList:[((ADXChipGroup *) nil_chk(self->chipGroup_)) getCheckedChipIds]];
  }
}

void ASChipGroupImpl_addChipWithId_withId_withId_(ASChipGroupImpl *self, id id_, id text, id chipParams) {
  for (id<ASIWidget> __strong child in nil_chk(self->widgets_)) {
    if ([((NSString *) nil_chk([((id<ASIWidget>) nil_chk(child)) getId])) isEqual:id_]) {
      return;
    }
  }
  id<ASIWidget> chip = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASChipImpl_LOCAL_NAME, ASChipImpl_LOCAL_NAME, self, false);
  [((id<ASIWidget>) nil_chk(chip)) setAttributeWithNSString:@"text" withId:text withBoolean:true];
  [chip setIdWithNSString:(NSString *) cast_chk(id_, [NSString class])];
  [chip setAttributeWithNSString:@"id" withId:id_ withBoolean:false];
  id<JavaUtilMap> chipParamsCss = ASModelExpressionParser_parseSimpleCssExpressionWithNSString_((NSString *) cast_chk(chipParams, [NSString class]));
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(chipParamsCss)) keySet])) {
    [chip setAttributeWithNSString:key withId:[chipParamsCss getWithId:key] withBoolean:false];
  }
}

void ASChipGroupImpl_removeChipWithId_(ASChipGroupImpl *self, id id_) {
  for (id<ASIWidget> __strong child in nil_chk(self->widgets_)) {
    if ([((NSString *) nil_chk([((id<ASIWidget>) nil_chk(child)) getId])) isEqual:id_]) {
      [self removeWithASIWidget:child];
      break;
    }
  }
}

void ASChipGroupImpl_nativePostCreate(ASChipGroupImpl *self) {
  [((ADXChipGroup *) nil_chk(self->chipGroup_)) setChipSpacingWithInt:JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"10dp"))];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipGroupImpl)

@implementation ASChipGroupImpl_ChipGroupExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASChipGroupImpl:(ASChipGroupImpl *)outer$ {
  ASChipGroupImpl_ChipGroupExt_initWithASChipGroupImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASChipGroupImpl_ChipGroupExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASChipGroupImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASChipGroupImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASChipGroupImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASChipGroupImpl_ChipGroupExt = { "ChipGroupExt", "com.ashera.chip", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASChipGroupImpl_ChipGroupExt;
}

@end

void ASChipGroupImpl_ChipGroupExt_initWithASChipGroupImpl_(ASChipGroupImpl_ChipGroupExt *self, ASChipGroupImpl *outer$) {
  self->this$0_ = outer$;
  ADXChipGroup_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASChipGroupImpl_ChipGroupExt *new_ASChipGroupImpl_ChipGroupExt_initWithASChipGroupImpl_(ASChipGroupImpl *outer$) {
  J2OBJC_NEW_IMPL(ASChipGroupImpl_ChipGroupExt, initWithASChipGroupImpl_, outer$)
}

ASChipGroupImpl_ChipGroupExt *create_ASChipGroupImpl_ChipGroupExt_initWithASChipGroupImpl_(ASChipGroupImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl_ChipGroupExt, initWithASChipGroupImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipGroupImpl_ChipGroupExt)

@implementation ASChipGroupImpl_OnCheckedStateChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onCheckedChangedWithADXChipGroup:(ADXChipGroup *)group
                        withJavaUtilList:(id<JavaUtilList>)checkedIds {
  if (action_ == nil || [action_ isEqual:@"onCheckedChanged"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onCheckedChanged"];
    id<JavaUtilMap> obj = [self getOnCheckedChangedEventObjWithADXChipGroup:group withJavaUtilList:checkedIds];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ group, checkedIds } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnCheckedChangedEventObjWithADXChipGroup:(ADXChipGroup *)group
                                              withJavaUtilList:(id<JavaUtilList>)checkedIds {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"checkedchanged"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"checkedIds", checkedIds);
  ASViewImpl_addEventInfoWithJavaUtilMap_withJavaUtilList_withASIFragment_(obj, checkedIds, [((id<ASIWidget>) nil_chk(w_)) getFragment]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onCheckedChanged" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onCheckedChangedWithADXChipGroup:withJavaUtilList:);
  methods[4].selector = @selector(getOnCheckedChangedEventObjWithADXChipGroup:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onCheckedChanged", "LADXChipGroup;LJavaUtilList;", "(Lcom/google/android/material/chip/ChipGroup;Ljava/util/List<Ljava/lang/Integer;>;)V", "getOnCheckedChangedEventObj", "(Lcom/google/android/material/chip/ChipGroup;Ljava/util/List<Ljava/lang/Integer;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASChipGroupImpl;" };
  static const J2ObjcClassInfo _ASChipGroupImpl_OnCheckedStateChangeListener = { "OnCheckedStateChangeListener", "com.ashera.chip", ptrTable, methods, fields, 7, 0xa, 5, 4, 7, -1, -1, -1, -1 };
  return &_ASChipGroupImpl_OnCheckedStateChangeListener;
}

@end

void ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(ASChipGroupImpl_OnCheckedStateChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASChipGroupImpl_OnCheckedStateChangeListener *new_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASChipGroupImpl_OnCheckedStateChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASChipGroupImpl_OnCheckedStateChangeListener *create_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl_OnCheckedStateChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(ASChipGroupImpl_OnCheckedStateChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASChipGroupImpl_OnCheckedStateChangeListener *new_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASChipGroupImpl_OnCheckedStateChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASChipGroupImpl_OnCheckedStateChangeListener *create_ASChipGroupImpl_OnCheckedStateChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl_OnCheckedStateChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASChipGroupImpl_OnCheckedStateChangeListener)

@implementation ASChipGroupImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASChipGroupImpl_$Lambda$1_initWithASIWidget_(ASChipGroupImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASChipGroupImpl_$Lambda$1 *new_ASChipGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASChipGroupImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASChipGroupImpl_$Lambda$1 *create_ASChipGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASChipGroupImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
